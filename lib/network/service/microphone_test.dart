import 'dart:developer';
import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';

/// Test widget ƒë·ªÉ ki·ªÉm tra microphone permission v√† status
class MicrophoneTest extends StatefulWidget {
  const MicrophoneTest({super.key});

  @override
  State<MicrophoneTest> createState() => _MicrophoneTestState();
}

class _MicrophoneTestState extends State<MicrophoneTest> {
  PermissionStatus _microphoneStatus = PermissionStatus.denied;
  bool _isChecking = false;

  @override
  void initState() {
    super.initState();
    _checkMicrophoneStatus();
  }

  Future<void> _checkMicrophoneStatus() async {
    setState(() {
      _isChecking = true;
    });

    try {
      log('üîç [MicrophoneTest] Checking microphone permission status...');
      final status = await Permission.microphone.status;
      log('üì± [MicrophoneTest] Microphone status: $status');
      
      setState(() {
        _microphoneStatus = status;
        _isChecking = false;
      });
    } catch (e) {
      log('‚ùå [MicrophoneTest] Error checking microphone status: $e');
      setState(() {
        _isChecking = false;
      });
    }
  }

  Future<void> _requestMicrophonePermission() async {
    setState(() {
      _isChecking = true;
    });

    try {
      log('‚ö†Ô∏è [MicrophoneTest] Requesting microphone permission...');
      final result = await Permission.microphone.request();
      log('üì± [MicrophoneTest] Permission request result: $result');
      
      setState(() {
        _microphoneStatus = result;
        _isChecking = false;
      });
    } catch (e) {
      log('‚ùå [MicrophoneTest] Error requesting microphone permission: $e');
      setState(() {
        _isChecking = false;
      });
    }
  }

  Future<void> _openAppSettings() async {
    log('‚öôÔ∏è [MicrophoneTest] Opening app settings...');
    await openAppSettings();
  }

  String _getStatusText(PermissionStatus status) {
    switch (status) {
      case PermissionStatus.granted:
        return '‚úÖ ƒê√£ c·∫•p quy·ªÅn';
      case PermissionStatus.denied:
        return '‚ùå B·ªã t·ª´ ch·ªëi';
      case PermissionStatus.restricted:
        return 'üö´ B·ªã h·∫°n ch·∫ø';
      case PermissionStatus.limited:
        return '‚ö†Ô∏è B·ªã gi·ªõi h·∫°n';
      case PermissionStatus.permanentlyDenied:
        return 'üö´ B·ªã t·ª´ ch·ªëi vƒ©nh vi·ªÖn';
      default:
        return '‚ùì Kh√¥ng x√°c ƒë·ªãnh';
    }
  }

  Color _getStatusColor(PermissionStatus status) {
    switch (status) {
      case PermissionStatus.granted:
        return Colors.green;
      case PermissionStatus.denied:
      case PermissionStatus.permanentlyDenied:
        return Colors.red;
      case PermissionStatus.restricted:
      case PermissionStatus.limited:
        return Colors.orange;
      default:
        return Colors.grey;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('üé§ Microphone Test'),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Status card
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Tr·∫°ng th√°i Microphone:',
                      style: Theme.of(context).textTheme.titleMedium,
                    ),
                    const SizedBox(height: 16),
                    Row(
                      children: [
                        Icon(
                          _microphoneStatus == PermissionStatus.granted 
                              ? Icons.mic 
                              : Icons.mic_off,
                          color: _getStatusColor(_microphoneStatus),
                          size: 32,
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                _getStatusText(_microphoneStatus),
                                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                                  color: _getStatusColor(_microphoneStatus),
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              Text(
                                'Status: $_microphoneStatus',
                                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                                  color: Colors.grey[600],
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
            
            const SizedBox(height: 16),
            
            // Actions card
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'H√†nh ƒë·ªông:',
                      style: Theme.of(context).textTheme.titleMedium,
                    ),
                    const SizedBox(height: 16),
                    
                    // Check status button
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton.icon(
                        onPressed: _isChecking ? null : _checkMicrophoneStatus,
                        icon: _isChecking 
                            ? const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(strokeWidth: 2),
                              )
                            : const Icon(Icons.refresh),
                        label: Text(_isChecking ? 'ƒêang ki·ªÉm tra...' : 'Ki·ªÉm tra tr·∫°ng th√°i'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.blue,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 16),
                        ),
                      ),
                    ),
                    
                    const SizedBox(height: 12),
                    
                    // Request permission button
                    if (_microphoneStatus != PermissionStatus.granted)
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton.icon(
                          onPressed: _isChecking ? null : _requestMicrophonePermission,
                          icon: const Icon(Icons.mic),
                          label: const Text('Y√™u c·∫ßu quy·ªÅn Microphone'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.orange,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(vertical: 16),
                          ),
                        ),
                      ),
                    
                    const SizedBox(height: 12),
                    
                    // Open settings button
                    if (_microphoneStatus == PermissionStatus.permanentlyDenied)
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton.icon(
                          onPressed: _openAppSettings,
                          icon: const Icon(Icons.settings),
                          label: const Text('M·ªü c√†i ƒë·∫∑t ·ª©ng d·ª•ng'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.red,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(vertical: 16),
                          ),
                        ),
                      ),
                  ],
                ),
              ),
            ),
            
            const SizedBox(height: 16),
            
            // Info card
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Th√¥ng tin:',
                      style: Theme.of(context).textTheme.titleMedium,
                    ),
                    const SizedBox(height: 8),
                    const Text('‚Ä¢ Ki·ªÉm tra tr·∫°ng th√°i quy·ªÅn microphone'),
                    const Text('‚Ä¢ Y√™u c·∫ßu quy·ªÅn n·∫øu ch∆∞a ƒë∆∞·ª£c c·∫•p'),
                    const Text('‚Ä¢ M·ªü c√†i ƒë·∫∑t n·∫øu b·ªã t·ª´ ch·ªëi vƒ©nh vi·ªÖn'),
                    const Text('‚Ä¢ Quy·ªÅn microphone c·∫ßn thi·∫øt cho speech recognition'),
                  ],
                ),
              ),
            ),
            
            const Spacer(),
            
            // Console log button
            SizedBox(
              width: double.infinity,
              child: OutlinedButton.icon(
                onPressed: () {
                  log('üé§ [MicrophoneTest] Manual log test - Microphone status: $_microphoneStatus');
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('ƒê√£ log tr·∫°ng th√°i microphone: $_microphoneStatus'),
                      backgroundColor: Colors.blue,
                    ),
                  );
                },
                icon: const Icon(Icons.info),
                label: const Text('Test Console Log'),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
